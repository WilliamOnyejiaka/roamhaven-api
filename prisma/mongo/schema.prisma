generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/@prisma-mongo/client"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

enum NotificationType {
    TRANSACTIONAL
    MARKETING
    LISTING
    CHAT
}

enum NotificationChannel {
    EMAIL
    PUSH
}

enum NotificationStatus {
    PENDING
    SENT
    FAILED
}

model Notification {
    id        String              @id @default(auto()) @map("_id") @db.ObjectId
    userId    Int
    type      NotificationType
    channel   NotificationChannel @default(PUSH)
    content   Json
    status    String
    priority  Int                 @default(1)
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt

    @@index([userId])
}

model Chat {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    participants Int[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    Message      Message[]

    @@index([participants])
}

enum MessageStatus {
    READ
    PENDING
    SENT
    FAILED
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
    FILE
}

model Message {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    sender    Int
    content   String
    recipient Int
    media     Media[]
    chatId    String        @db.ObjectId
    chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
    status    MessageStatus
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@index([recipient])
    @@index([sender])
    @@index([chatId])
}

model Media {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    url        String
    type       MediaType
    fileName   String
    fileSize   Int
    uploadedAt DateTime
    messageId  String    @db.ObjectId
    message    Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@index([messageId])
}
